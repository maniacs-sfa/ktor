buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }

        if (kotlin_version.contains("-eap") || kotlin_version.contains("-rc")) {
            if (kotlin_version.startsWith("1.1")) {
                maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            } else if (kotlin_version.startsWith("1.2")) {
                maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
                maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
            }
        } else if (kotlin_version.contains("-dev")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        } else if (kotlin_version.endsWith("-SNAPSHOT")) {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'net.researchgate:gradle-release:2.4.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'net.researchgate.release'

ext.configuredVersion = project.hasProperty('releaseVersion') ? project.releaseVersion : project.version
ext.dokkaExcludes = [
        'ktor-server',
        'ktor-samples',
        'ktor-features',
        'ktor-client'
]

ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty('publishLocal')

def commonModules = [
        'ktor-client-core',
        'ktor-utils',
        'ktor-http'
]

allprojects {
    group = 'io.ktor'
    version = configuredVersion

    repositories {
//        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/e5l/kotlinx-io-test" }

        if (kotlin_version.contains("-eap") || kotlin_version.contains("-rc")) {
            if (kotlin_version.startsWith("1.1")) {
                maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            } else if (kotlin_version.startsWith("1.2")) {
                maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
                maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
            }
        } else if (kotlin_version.contains("-dev")) {
            maven { url 'http://daal.bintray.com/kotlin/kotlin-dev' }
        } else if (kotlin_version.endsWith("-SNAPSHOT")) {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        }
    }

    if (commonModules.contains(project.name)) {
        apply from: rootProject.file('gradle/common.gradle')
    } else {
        apply from: rootProject.file('gradle/jvm.gradle')
    }

    sourceSets {
        main {
            java {
                srcDir "src"
            }
            kotlin {
                srcDir "src"
            }
            resources {
                srcDir "resources"
            }
        }
        test {
            kotlin {
                srcDir "test"
            }
            resources {
                srcDir "test-resources"
            }
        }
    }

    kotlin.experimental.coroutines = 'enable'
}

release {
    scmAdapters = [net.researchgate.release.GitAdapter]
    git {
        requireBranch = 'gradle-build'
    }
}

afterReleaseBuild.dependsOn bintrayUpload
